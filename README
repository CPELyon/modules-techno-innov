mod_gpio_demo is an example code for the development module made by
Techno-Innov.

It has support for the LPC1224 as used on this development module, and
for the peripherals found on the development module (Led, eeprom and
temperature sensor).
Support for various other cool stuff is added when we play with it.

Example applications are created in the apps directory, with one
sub-directory for each application. These are (and must stay) independent.

More usefull stuff is up to you. Creating an app is *very* simple. Copy
an example from apps/ to the name you want and simply change "NAME" in the
Makefile to the name of your new directory. Please, no spaces in the name !


********************
BUID and FLASH

Build has been tested using gcc, and only gcc, in the version provided by
the emdebian project, and a few other binary versions available for
download on the Internet, but any ARM gcc toolchain should do.

In order to get the emdebian ARM gcc cross-toolchain you should add this
repository to your apt sources :
   deb http://www.emdebian.org/debian/ unstable main
and then update and install package gcc-4.7-arm-linux-gnueabi
It may be required that you update the alternatives for this compiler, with
a line like this one :
   update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-4.7 60

There's no need for the related libc package here, the libc does not fit
in our micro-controller memory. Instead have a look at the content of the
lib/ directory, and add stuff there.

Once done you should build using the provided makefile by running the
simple "make" command in the base directory, which will build all apps, or
run "make <app_name>" to build a specific application. You can also run the
simple "make" command in the specific app subdirectory to compile this
application alone.

To flash the binary (the one with .bin) to the LPC Flash you will need the
lpctool package, now packaged for Debian, starting with Jessie, or available
in our git repository : http://git.techno-innov.fr/lpctools
Clone using :
   git clone http://gitclone.techno-innov.fr/lpctools
Then build (make) and use :)
Usual command lines :
   ./lpcprog -d /dev/ttyUSB0 -c id
   ./lpcprog -d /dev/ttyUSB0 -c flash app_name.bin
See lpctools readme and lpcprog or isp help (-h) or manpages for more
information.


********************
SUPPORTED FEATURES and INTERFACES

- LPC1224 micro-controller definitions
   - Cortex-M0 specific definitions
   - Cortex-M0 and LPC1224 Registers
   - Interrupts
   - ROM based division routines
   - Utility functions to replace ctz and clz instructions (not present in Cortex M0)
   - IAP ROM based functions (tested for user flash access only)

- Bootstrap
   - vector table
   - reset handler

- System
   - flash accelerator configuration
   - watchdog (stop)
   - clock / PLL config
   - systick
   - precise msleep and usleep functions (using systick)
   - counter / timers
   - pio configuration

- Simple C Library
   - memcpy and memset
   - strcpy, strncpy, strcmp, strncmp, strchr, strrchr, strlen, strnlen
   - snprintf, vsnprintf

- Integrated Interface drivers
   - UART (as UART or RS485)
   - I²C
   - ADC
   - GPIO
   - GPIO interrupts
   - SPI (SSP)
   - PWM

- External Device drivers
   - I²C EEPROM
   - TMP101 I²C temperature sensor
   - DHT11 temperatur and Humidity sensor
   - CC1101 Sub 1GHz RF Transceiver
   - Status led


********************
TODO :

- Deep sleep mode support.
- Test all the GPIO in different modes
- Add support for SDCard over SPI
- RTC Support
- Comparator support
- Watchdog support
- CRC engine support
- Test UART IrDA mode

